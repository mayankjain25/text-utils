{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","TextForm","useState","text","setText","setIsCopied","color","heading","placeholder","backgroundColor","rows","value","onChange","event","target","onCopy","showAlert","setTimeout","onClick","toggleMode","htmlFor","name","colorPicker","split","filter","element","length","disabled","console","log","newText","toUpperCase","toLowerCase","trim","arr","i","charAt","slice","join","count","key","prompt","class","App","setMode","setAlert","setColor","message","document","body","col","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b0a70fad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n\r\n    const alertStyle={\r\n        height: \"50px\"\r\n    }\r\n    return (\r\n        <div style={alertStyle}>\r\n           { props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} d-flex align-items-center\" role=\"alert\"`}>\r\n                {/* <svg throwIfNamespace: \"false\" className=\"bi flex-shrink-0 me-2\" width=\"24\" height=\"24\" role=\"img\" aria-label=\"Info:\"><use xlink:href=\"#info-fill\"/></svg> */}\r\n                <div>\r\n                    <strong>{props.alert.msg}</strong>\r\n                </div>\r\n            </div>\r\n        </div>}\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Navbar(props) {\r\n\r\n\r\n \r\n    return (\r\n        <div>\r\n          \r\n          <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"/about\">About</a>\r\n                </li> */}\r\n                \r\n              </ul>\r\n              \r\n            \r\n            </div>\r\n              \r\n          </div>\r\n        </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes={\r\n    \r\n    title:PropTypes.string,\r\n\r\n                }\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\nimport './TextForm.css'\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText]=useState(\"\")\r\n    // const [numWords,setNumWords] = useState(0);\r\n    // const [numChar,setNumChar] = useState(0);\r\n    const [isCopied,setIsCopied]=useState(false);\r\n   \r\n    \r\n\r\n\r\n    const onCopyText=()=>{\r\n        props.showAlert(\"Copied!\",\"success\")\r\n        setIsCopied(true);\r\n        setTimeout(()=>{\r\n            setIsCopied(false);\r\n        },1000)\r\n    }\r\n\r\n   \r\n    const handleUpClick = () =>{\r\n        console.log(\"Upper was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case Successfully!\",\"success\")\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n        // countWords(text);\r\n        // countCharacters(text);\r\n        // let len = countWords(text)\r\n        // setNumWords(len)\r\n        // console.log(\"change triggered\");\r\n    }\r\n\r\n    const handleLowClick=()=>{\r\n\r\n\r\n        if(text.length===0){\r\n            props.showAlert(\"Text Area empty\",\"danger\")\r\n        }\r\n        else{\r\n\r\n            \r\n                    let newText=text.toLowerCase();\r\n                    \r\n                    setText(newText);\r\n                    props.showAlert(\"Converted to Lower Case Successfully\",\"success\")\r\n        }\r\n    }\r\n\r\n    const handleTrimClick=()=>{\r\n        setText(text.trim());\r\n        props.showAlert(\"Trimmed successfully\",\"success\")\r\n    }\r\n\r\n    const handleCapitalizeClick=()=>{\r\n        let newText=text;\r\n        const arr=newText.split(\" \");\r\n        \r\n        for(let i=0;i<arr.length;i++){\r\n\r\n            arr[i]=arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n\r\n        }\r\n\r\n        newText=arr.join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"Capitalized Successfully\",\"success\")\r\n    }\r\n\r\n    // const resetWord=()=>{\r\n    //     setNumWords(0);\r\n    //     setNumChar(0);\r\n    // }\r\n\r\n    // const countWords=(text)=>{\r\n\r\n    //     setNumWords(text.split(\" \").filter((element)=>{return element.length!==0}).length)\r\n\r\n    // }\r\n\r\n    // const countCharacters = (text) =>{\r\n    //     setNumChar(text.length)\r\n    // }\r\n    \r\n    const handleOccurrenceClick=()=>{\r\n\r\n            let count=0;\r\n            const key=prompt(\"Enter the value to find its occurrences: \")\r\n            const arr=text.split(\" \");\r\n            for(let i=0;i<arr.length;i++){\r\n                if(arr[i]===key) count=count+1;\r\n            }\r\n\r\n            if(count===0) props.showAlert(\"No occurrence found\",\"danger\")\r\n            else props.showAlert(`${key} found ${count} times`,\"success\")\r\n            // alert(key + \" occurs \"+ count+ \" times\")\r\n    }\r\n\r\n    const colorFunc=(event)=>{\r\n        \r\n        props.colorPicker(event.target.value)\r\n      }\r\n    return (\r\n        <div style={{color: props.mode==='light'?'black':'white'}}>\r\n            <div className={`mb-3 container`} >\r\n                <h1 className=\"textform-heading\">{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    {/* <label for=\"my-textarea\" className=\"form-label my-3\">{props.heading}</label> */}\r\n                    \r\n                    \r\n                    <textarea placeholder=\"Enter your text here\" className=\"form-control input-textarea\" style={{backgroundColor: props.mode==='light'?'white':'lightgray'}} id=\"my-textarea\" rows=\"10\" value={text} onChange={handleOnChange} \r\n                    >\r\n                        \r\n                    </textarea>\r\n\r\n                        <div className=\"copy-and-dark\">\r\n\r\n                    <CopyToClipboard text={text} onCopy={onCopyText}>\r\n                            <div className=\"copy-area\">\r\n                            <button className=\"btn btn-dark my-3\">Copy</button>\r\n                            \r\n                            </div>\r\n                            \r\n                     </CopyToClipboard>\r\n\r\n                     <div className={`form-check form-switch dark-mode-toggler `}>\r\n                                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                                <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`}\r\n                                htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                               \r\n                     </div>\r\n\r\n                     <div className=\"color-picker-container\">\r\n                     <input title=\"Any color picked from here will be applied if you press the dark mode switch\" type=\"color\" name=\"colorchooser\" onChange={colorFunc} />\r\n                     </div>\r\n                        </div>\r\n                </div> \r\n            </div>\r\n\r\n            <div className=\"container\">\r\n\r\n            <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} Words, {text.length} Characters</p>\r\n            <div className=\"text-btn-container\">\r\n\r\n                <button disabled={text.length===0} onClick={handleUpClick}  className=\"btn btn-primary text-buttons \">Convert to Upper Case</button>\r\n                <button disabled={text.length===0} onClick={handleLowClick} className=\"btn btn-primary text-buttons\">Convert to Lower Case</button>\r\n                <button disabled={text.length===0} onClick={handleTrimClick} className=\"btn btn-primary text-buttons\">Remove Trailing spaces</button>\r\n                <button disabled={text.length===0} onClick={handleCapitalizeClick} className=\"btn btn-primary text-buttons\">Capitalize String</button>\r\n                <button disabled={text.length===0} onClick={handleOccurrenceClick} class=\"btn btn-primary text-buttons\">Find Occurrence</button>\r\n            </div>\r\n            </div>\r\n\r\n            \r\n\r\n            <div className=\"container text-preview\">\r\n                <h2>Text Preview</h2>\r\n                <p>{text===\"\"?\"(Enter some text in the textbox to preview)\":text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","\nimport { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm'\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const[mode,setMode] = useState('light')\n  const [alert,setAlert] = useState(null)\n\n  const [color,setColor] = useState(\"#000000\")\n\n  const showAlert = (message,type) =>{\n\n          setAlert({\n            msg: message,\n            type: type\n          })\n\n          setTimeout(() => {\n            setAlert(null)\n          }, 2000);\n  }\n\n  const colorPicker = (col)=>{\n    setColor(col)\n  }\n\n  const toggleMode=()=>{\n    console.log(\"toggle triggered\");\n    if(mode==='light') {\n        setMode('dark');\n        document.body.style.backgroundColor=color;\n        showAlert(\"Enabled Dark Mode Successfully\",\"success\")\n    }\n    else {setMode('light');document.body.style.backgroundColor=\"white\";showAlert(\"Light Mode Enabled\",\"success\")}\n  }\n\n\n\n  return (\n   <>\n        {/* <Router> */}\n          <Navbar title=\"TextUtils\"  mode={mode}/>\n\n          <Alert alert={alert} />\n\n          {/* <Switch>\n            <Route exact path=\"/about\"> */}\n              {/* <div className=\"container\">\n\n              <About />\n              </div>\n            </Route> */}\n          \n            {/* <Route exact path=\"/\"> */}\n              <div className=\"container\">\n\n            <TextForm heading=\"TextUtils - The Text Utility App\" mode={mode} toggleMode={toggleMode} showAlert={showAlert} colorPicker={colorPicker} /> \n              </div>\n            {/* </Route>\n          </Switch> */}\n        {/* </Router> */}\n        \n        \n  \n   </>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}